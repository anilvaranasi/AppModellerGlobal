<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>global.ERDProcessorUtils</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <mobile_callable>false</mobile_callable>
        <name>ERDProcessorUtils</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[var ERDProcessorUtils = Class.create();
ERDProcessorUtils.prototype = Object.extendsObject(ERDProcessor, {
    initialize: function() {
        ERDProcessor.prototype.initialize.call(this);
    },
    /*custom changes*/
    //Provides list of tables that are referenced by a given table
    getReferencedTables: function(table) {
        var referencedTables = {};
        var grDict = new GlideRecord('sys_dictionary');
        var dictEnQuery = 'internal_type=reference^name=' + table;
        grDict.addEncodedQuery(dictEnQuery);
        grDict.query();
        while (grDict.next()) {
            referencedTables[grDict.reference.name.toString()] = 1;
        }
        return referencedTables;
    },
    getScriptReferences: function(table) {
        var sDebug = 'Printing from Fixscript ';
        var columnHash = {};
        var objectHash = {};
        var grDict = new GlideRecord('sys_dictionary');
        //  var dictEnQuery = 'internal_type=script^ORinternal_type=script_plain^ORinternal_type=script_client^ORinternal_type=script_server^nameNOT LIKEvar__^nameSTARTSWITHsys_sc';
        var dictEnQuery = 'internal_type=script^ORinternal_type=script_plain^ORinternal_type=script_client^ORinternal_type=script_server^nameNOT LIKEvar__';
        grDict.addEncodedQuery(dictEnQuery);
        grDict.query();
        while (grDict.next()) {
            if (global.JSUtil.nil(columnHash[grDict.name.toString()])) {
                columnHash[grDict.name.toString()] = grDict.element;
            } else {
                columnHash[grDict.name.toString()] += "|" + grDict.element;
            }
        }
        for (var key in columnHash) {
            var objArray = [];
            //sDebug += key + "=" + columnHash[key] + "\n";
            try {
                objArray = this._lookupTableInScript(key, table, columnHash[key]);
                if (objArray.length > 0) {
                    objectHash[key] = objArray;
                }
            } catch (e) {
                gs.print("exception: " + e);
            }
        }

        //gs.print(sDebug);
        return objectHash;
    },
    _lookupTableInScript: function(tableGr, tableQuery, columnString) {
        var returnObjList;
        var returnObjArray = [];
        var grTable = new GlideRecord(tableGr);
        //scriptLIKEnew GlideRecord('incident');^ORscriptLIKEnew GlideRecord('incident');
        var enQuery = '';
        var columnArray = columnString.split("|");
        for (var k = 0; k < columnArray.length; k++) {
            if (global.JSUtil.nil(enQuery)) {
                enQuery = columnArray[k] + 'LIKEnew GlideRecord(' + "'" + tableQuery + "')";
            } else {
                enQuery += "^OR" + columnArray[k] + 'LIKEnew GlideRecord(' + "'" + tableQuery + "')";
            }
        }
        var isValidQuery = grTable.isValidEncodedQuery(enQuery);
        if (isValidQuery) {
            grTable.addEncodedQuery(enQuery);
            grTable.query();
            while (grTable.next()) {
                if (global.JSUtil.nil(returnObjList)) {
                    returnObjList = grTable.sys_id.toString();
                } else {
                    returnObjList += "|" + grTable.sys_id.toString();
                }
            }
            if (global.JSUtil.notNil(returnObjList) && returnObjList.length > 1) {
                returnObjArray = returnObjList.split("|");
            }
        }
        return (returnObjArray);
    },
    type: 'ERDProcessorUtils'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2025-03-13 04:30:31</sys_created_on>
        <sys_id>cee8b2b083502210b0abcfc0deaad377</sys_id>
        <sys_mod_count>11</sys_mod_count>
        <sys_name>ERDProcessorUtils</sys_name>
        <sys_package display_value="App Modeller Global" source="f1a7ba7c83102210b0abcfc0deaad309">f1a7ba7c83102210b0abcfc0deaad309</sys_package>
        <sys_policy/>
        <sys_scope display_value="App Modeller Global">f1a7ba7c83102210b0abcfc0deaad309</sys_scope>
        <sys_update_name>sys_script_include_cee8b2b083502210b0abcfc0deaad377</sys_update_name>
        <sys_updated_by>avaranasi</sys_updated_by>
        <sys_updated_on>2025-03-23 05:51:07</sys_updated_on>
    </sys_script_include>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>cee8b2b083502210b0abcfc0deaad377</id>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2025-03-13 04:30:30</sys_created_on>
        <sys_id>dc49f6b083502210b0abcfc0deaad358</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-03-13 04:30:30</sys_updated_on>
        <table>sys_script_include</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
